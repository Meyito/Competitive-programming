#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string>
#include <cstring>
#include <cstdlib>
#include <cassert>
#include <climits>
#include <cctype>
 
#define ll long long
#define ull unsigned long long
#define all(v)  v.begin() , v.end()
#define f(i,x,y) for (int i = x; i < y; i++)
#define FOR(it,A) for(typeof A.begin() it = A.begin(); it!=A.end(); it++)
#define pb push_back
#define vi vector<int>
#define vll vector<ll>
#define vull vector<ull>
#define pii pair< int , int >
#define pll pair< ll , ll >
#define mp make_pair
#define fi first
#define se second
#define sc(x) scanf("%d",&x)
#define me(t,val) memset( t , val , sizeof(t) )
 
#define MOD 1000000009
#define INF (1<<30)
#define EPS (1e-5) 
#define MAX 1000000000
#define ERR (1e-9)
#define SIZE 100005 

using namespace std ;

int row , col ; 
int dp [103][103] ;
int M [103][103] ;

int solve ( int i , int j )
{
	if ( dp[i][j] != -1 ) return dp[i][j] ; 
	
	int up = 0 ; 
	int down = 0 ; 
	int left = 0 ; 
	int right = 0 ; 
	
	if ( i != 0 && M[i-1][j] < M[i][j] ) 		up = solve ( i-1 , j ) + 1 ;
	if ( j != 0 && M[i][j-1] < M[i][j] ) 		left = solve ( i , j - 1 ) + 1 ;
	if ( i != row-1 && M[i+1][j] < M[i][j] ) 	down = solve ( i+1 , j ) + 1 ;
	if ( j != col-1 && M[i][j+1] < M[i][j] ) 	right = solve ( i , j + 1 ) + 1 ;
	
	dp[i][j] = max ( up , max ( left , max ( down,right ) ) ) ;
	
	return dp[i][j] ;
}

int main ()
{
	int n ; cin >> n ;
	while ( n-- )
	{
		string name ; 
		cin >> name >> row >> col ;
		memset ( dp , -1 , sizeof( dp ) ) ;
		for ( int y = 0 ; y < row ; y++ )
		{
			for ( int x = 0 ; x < col ; x++ )
			{
				cin >> M[y][x] ;
			}
		}
		int ans = INT_MIN ; 
		for ( int y = 0 ; y < row ; y++ )
		{
			for ( int x = 0 ; x < col ; x++ )
			{
				int p = solve ( y , x ) ;
				if ( p > ans ) ans = p ; 
			}
		}
		cout << name <<": " << ( ans + 1 )  << endl;
	}
	return 0 ;
}
